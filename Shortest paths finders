
#include<iostream>
#include<queue>
#include<vector>
using namespace std;
int initialstate;
int goalstate;
int edges,from,to,depth[1000];
//int state;
bool visited[1000];
queue<int> openlist;
vector<int> adj[1000];
vector<int> closelist;

void graph(){
cout<<"enter num of edges";
cin>>edges;
cout<<"enter edges:"<<endl;
// Example input:
//1 3
//0 4
for(int i=0;i<edges;i++){
    cin>>from>>to;
    adj[from].push_back(to);

}}
//BSF
void BFS(int start){

    openlist.push(start);
    depth[start]=0;
    visited[start]=true;

    while(!openlist.empty()){

        int currentstate=openlist.front();

        openlist.pop();
        closelist.push_back(currentstate);
        if(currentstate==goalstate){
            return;
        }


        for(auto state:adj[currentstate]){
            if(visited[state]){
                continue;

            }

            openlist.push(state);
            visited[state]=true;
            depth[state]=depth[currentstate]+1;

        }}

    return;}

    void display_shortest_path(){
    cout<<"the path is  ";
    for(int i=0;i<closelist.size();i++){
        cout<<closelist[i]<<" ";
    }
    cout<<"number of edges to goal/goal is in level :  "<<depth[goalstate];
    }

int main(){
graph();
cout<<"enter start state:";
cin>>initialstate;
cout<<"enter goal state";
cin>>goalstate;
BFS(initialstate);
display_shortest_path();
return 0;
}
